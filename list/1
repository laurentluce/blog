This post describes how lists are implemented in the Python language.

Lists in Python are powerful and It is interesting to see how they are implemented.

Following is a simple script appending some integers to a list and printing them.

[code lang="bash"]
>>> l = []
>>> l.append(1)
>>> l.append(2)
>>> l.append(3)
>>> l
[1, 2, 3]
>>> for e in l:
...   print e
... 
1
2
3
[/code]

<h2>List object C structure</h2>

A list object in Python is represented using the following C structure. ob_item is a list of pointers to list elements. allocated is the number of elements allocated in memory.  

[code lang="c"]
typedef struct {
    PyObject_VAR_HEAD
    PyObject **ob_item;
    Py_ssize_t allocated;
} PyListObject;
[/code]

Let's look at what happens when we initialize an empy list. e.g. l = [].

[code lang="text"]
arguments: size of the list
returns: list object
PyListNew:
  nbytes = size * size of Python object PyObject
  allocate new list object
  allocate list of pointers (ob_item) of size nbytes
  clear ob_item
  set list allocated var to 0
  return list object 
[/code]

If you run hash('a') in Python, it will execute string_hash() and return 12416037344. Here we assume we are using a 64-bit machine.

If an array of size x is used to store the key/value pairs then we use a mask equal to x-1 to calculate the slot index of the pair in the array. For example, if the size of the array is 8, the index for 'a' will be: hash('a') & 7 = 0. The index for 'b' is 3, the index for 'c' is 2, the index for 'z' is 3 which is the same as 'b', here we have a collision.

<img src="/images/blog/dict/hash.png" alt="hash table">

We can see that the Python hash function does a good job when the keys are consecutive which is good because it is quite common to have this type of data to work with. However, once we add the key 'z', there is a collision because it is not consecutive enough.
  
We could use a linked list to store the pairs having the same hash but it would increase the lookup time e.g. not O(1) anymore. The next section describes the collision resolution method used in the case of Python dictionaries.

<h2>Open addressing</h2>

Open addressing is a method of collision resolution where probing is used. In case of 'z', the slot index 3 is already used in the array so we need to probe for a different index to find one which is not already used. Adding a key/value pair might take more time because of the probing but the lookup will be O(1) and this is the desired behavior.

A quadratic probing sequence is used to find a free slot. The code is the following:

[code lang="c"]
for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {
  i = (i << 2) + i + perturb + 1;
  // check if index = i & mask is free
  ...
}
[/code]

Let's see how this probing works when we start with i = 3:
3 -> 3 -> 5 -> 5 -> 6 -> 0...
This is not a really good example because we are using a small table of size 8 and this probing starts showing its advantages on larger tables. In our case, index 5 is free so it will be picked for key 'z'.

Just out of curiosity, let's look at the probing sequence when the table size is 32 e.g. mask = 31
3 -> 11 -> 19 -> 29 -> 5 -> 6 -> 16 -> 31 -> 28 -> 13 -> 2...

You can read more about this probing sequence by looking at the source code of <a href="http://svn.python.org/projects/python/trunk/Objects/dictobject.c">dictobject.c</a>. A detailed explanation of the probing mechanism can be found at the top of the file.

<img src="/images/blog/dict/probing.png" alt="open addressing">

Now, let's look at the Python internal code along with an example.

<h2>Dictionary C structures</h2>

The following C structure is used to store a dictionary entry: key/value pair. The hash, key and value are stored. PyObject is the base class of the Python objects.

[code lang="c"]
typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
[/code]

The following structure represents a dictionary. ma_fill is the number of used slots + dummy slots. A slot is marked dummy when a key pair is removed. ma_used is the number of used slots (active). ma_mask is equal to the array's size minus 1 and is used to calculate the slot index. ma_table is the array and ma_smalltable is the initial array of size 8.

[code lang="c"]
typedef struct _dictobject PyDictObject;
struct _dictobject {
    PyObject_HEAD
    Py_ssize_t ma_fill;
    Py_ssize_t ma_used;
    Py_ssize_t ma_mask;
    PyDictEntry *ma_table;
    PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, long hash);
    PyDictEntry ma_smalltable[PyDict_MINSIZE];
};
[/code]

<h2>Dictionary initialization</h2>

When you first create a dictionary, the function PyDict_New() is called. I removed some of the lines to concentrate on the key concepts. This function allocates memory for a new dictionary object and initializes ma_fill and ma_used to 0, ma_mask to array's size - 1 = 8 - 1 = 7 and clears the structure ma_small_table which is our initial array of size 8. lookdict_string is the lookup function used by default and works for string keys which is what we are going to use in our example. Python dictionary also supports integers and tuples as keys.

[code lang="c"]
PyObject *
PyDict_New(void)
{
    register PyDictObject *mp;
    ...
    if (numfree) {
        ...
    } else {
        mp = PyObject_GC_New(PyDictObject, &PyDict_Type);
        if (mp == NULL)
            return NULL;
        EMPTY_TO_MINSIZE(mp);
        ...
    }
    ...
    mp->ma_lookup = lookdict_string;
    ...
    return (PyObject *)mp;
}

#define INIT_NONZERO_DICT_SLOTS(mp) do {                                \
    (mp)->ma_table = (mp)->ma_smalltable;                               \
    (mp)->ma_mask = PyDict_MINSIZE - 1;                                 \
    } while(0)

#define EMPTY_TO_MINSIZE(mp) do {                                       \
    memset((mp)->ma_smalltable, 0, sizeof((mp)->ma_smalltable));        \
    (mp)->ma_used = (mp)->ma_fill = 0;                                  \
    INIT_NONZERO_DICT_SLOTS(mp);                                        \
    } while(0)
[/code]

<h2>Adding items</h2>

When a new key/value pair is added, PyDict_SetItem() is called. This function takes a pointer to the dictionary object and the key/value pair. It checks if the key is a string and calculates the hash or reuses the one cached if it exists. insertdict() is called to add the new key/value pair and the dictionary is resized if the number of used slots is greater than 2/3 of the array's size.
Why 2/3? It is to make sure the probing sequence can find a free slot fast enough. We will look at the resizing function later.

[code lang="c"]
int
PyDict_SetItem(register PyObject *op, PyObject *key, PyObject *value)
{
    register PyDictObject *mp;
    register long hash;
    register Py_ssize_t n_used;

    ...
    mp = (PyDictObject *)op;
    if (PyString_CheckExact(key)) {
        hash = ((PyStringObject *)key)->ob_shash;
        if (hash == -1)
            hash = PyObject_Hash(key);
    }
    ...
    n_used = mp->ma_used;
    if (insertdict(mp, key, hash, value) != 0)
        return -1;
    if (!(mp->ma_used > n_used && mp->ma_fill*3 >= (mp->ma_mask+1)*2))
        return 0;
    return dictresize(mp, (mp->ma_used > 50000 ? 2 : 4) * mp->ma_used);
}
[/code]

inserdict() uses the lookup function to find a free slot. This is the next function we are going to examine. lookdict_string() calculates the slot index using the hash and the mask values. If the slot is not free, it probes using the perturb loop we saw above. This function handles the case where the key/value pair already exists in the array.

[code lang="c"]
static PyDictEntry *
lookdict_string(PyDictObject *mp, PyObject *key, register long hash)
{
    register size_t i;
    register size_t perturb;
    register PyDictEntry *freeslot;
    register size_t mask = (size_t)mp->ma_mask;
    PyDictEntry *ep0 = mp->ma_table;
    register PyDictEntry *ep;

    i = hash & mask;
    ep = &ep0[i];
    if (ep->me_key == NULL || ep->me_key == key)
        return ep;
    if (ep->me_key == dummy)
        freeslot = ep;
    else {
        if (ep->me_hash == hash && _PyString_Eq(ep->me_key, key))
            return ep;
        freeslot = NULL;
    }

    for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {
        i = (i << 2) + i + perturb + 1;
        ep = &ep0[i & mask];
        if (ep->me_key == NULL)
            return freeslot == NULL ? ep : freeslot;
        if (ep->me_key == key
            || (ep->me_hash == hash
            && ep->me_key != dummy
            && _PyString_Eq(ep->me_key, key)))
            return ep;
        if (ep->me_key == dummy && freeslot == NULL)
            freeslot = ep;
    }
    ...
}
[/code]

We want to add the following key/value pairs: {'a': 1, 'b': 2', 'z': 26, 'y': 25, 'c': 5, 'x': 24}. This is what happens:

A dictionary structure is allocated with internal table size of 8.

<ul>
  <li>PyDict_SetItem: key = 'a', value = 1</li>
  <ul>
    <li>hash = hash('a') = 12416037344</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 12416037344 & 7 = 0</li>
        <li>slot 0 is not used so return it</li>
      </ul>
      <li>init entry at index 0 with key, value and hash</li>
      <li>ma_used = 1, ma_fill = 1</li>
    </ul>
  </ul>
  <li>PyDict_SetItem: key = 'b', value = 2</li>
  <ul>
    <li>hash = hash('b') = 12544037731</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 12544037731 & 7 = 3</li>
        <li>slot 3 is not used so return it</li>
      </ul>
      <li>init entry at index 3 with key, value and hash</li>
      <li>ma_used = 2, ma_fill = 2</li>
    </ul>
  </ul>
  <li>PyDict_SetItem: key = 'z', value = 26</li>
  <ul>
    <li>hash = hash('z') = 15616046971</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 15616046971 & 7 = 3</li>
        <li>slot 3 is used so probe for a different slot: 5 is free</li>
      </ul>
      <li>init entry at index 5 with key, value and hash</li>
      <li>ma_used = 3, ma_fill = 3</li>
    </ul>
  </ul>
  <li>PyDict_SetItem: key = 'y', value = 25</li>
  <ul>
    <li>hash = hash('y') = 15488046584</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 15488046584 & 7 = 0</li>
        <li>slot 0 is used so probe for a different slot: 1 is free</li>
      </ul>
      <li>init entry at index 1 with key, value and hash</li>
      <li>ma_used = 4, ma_fill = 4</li>
    </ul>
  </ul>
  <li>PyDict_SetItem: key = 'c', value = 3</li>
  <ul>
    <li>hash = hash('c') = 12672038114</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 12672038114 & 7 = 2</li>
        <li>slot 2 is free so return it</li>
      </ul>
      <li>init entry at index 2 with key, value and hash</li>
      <li>ma_used = 5, ma_fill = 5</li>
    </ul>
  </ul>
  <li>PyDict_SetItem: key = 'x', value = 24</li>
  <ul>
    <li>hash = hash('x') = 15360046201</li>
    <li>insertdict</li>
    <ul>
      <li>lookdict_string</li>
      <ul>
        <li>slot index = hash & mask = 15360046201 & 7 = 1</li>
        <li>slot 1 is used so probe for a different slot: 7 is free</li>
      </ul>
      <li>init entry at index 7 with key, value and hash</li>
      <li>ma_used = 6, ma_fill = 6</li>
    </ul>
  </ul>
</ul>

This is what we have so far:

<img src="/images/blog/dict/insert.png" alt="python dictionary insert">

6 slots on 8 are used now so we are over 2/3 of the array's capacity. dictresize() is called to allocate a larger array. This function also takes care of copying the old table entries to the new table.

dictresize() is called with minused = 24 in our case which is 4 * ma_used. 2 * ma_used is used when the number of used slots is very large (greater than 50000). Why 4 times the number of used slots? It reduces the number of resize steps and it increases sparseness.

The new table size needs to be greater than 24 and it is calculated by shifting the current size 1 bit left until it is greater than 24. It ends up being 32 e.g. 8 -> 16 -> 32.

[code lang="c"]
static int
dictresize(PyDictObject *mp, Py_ssize_t minused)
{
    Py_ssize_t newsize;
    PyDictEntry *oldtable, *newtable, *ep;
    Py_ssize_t i;

    ...
    for (newsize = PyDict_MINSIZE;
         newsize <= minused && newsize > 0;
         newsize <<= 1)
        ;
    ...
    oldtable = mp->ma_table;
    ...

    if (newsize == PyDict_MINSIZE) {
        ...
    }
    else {
        newtable = PyMem_NEW(PyDictEntry, newsize);
        ...
    }

    ...
    mp->ma_table = newtable;
    mp->ma_mask = newsize - 1;
    memset(newtable, 0, sizeof(PyDictEntry) * newsize);
    mp->ma_used = 0;
    i = mp->ma_fill;
    mp->ma_fill = 0;

    for (ep = oldtable; i > 0; ep++) {
        if (ep->me_value != NULL) {
            --i;
            insertdict_clean(mp, ep->me_key, (long)ep->me_hash,
                             ep->me_value);
        }
        else if (ep->me_key != NULL) {
            ...
        }
    }
    
    ...
    return 0;
}
[/code]

This is what happens with our table during resizing: a new table of size 32 is allocated. Old table entries are inserted into the new table using the new mask value which is 31. We end up with the following:

<img src="/images/blog/dict/resizing.png" alt="python dictionary table resizing">

<h2>Removing items</h2>

PyDict_DelItem() is called to remove an entry. The hash for this key is calculated and the lookup function is called to return the entry. The key for this entry is set to the dummy key. Dummy entries are entries which contained a key in the past but have not been reused yet. The probe sequence use the dummy information in case of collision to know that those entries held an active pair in the past.

[code lang="c"]
int
PyDict_DelItem(PyObject *op, PyObject *key)
{
    register PyDictObject *mp;
    register long hash;
    register PyDictEntry *ep;

    ...
    if (!PyString_CheckExact(key) ||
        (hash = ((PyStringObject *) key)->ob_shash) == -1) {
        hash = PyObject_Hash(key);
        if (hash == -1)
            return -1;
    }
    mp = (PyDictObject *)op;
    ep = (mp->ma_lookup)(mp, key, hash);
    if (ep == NULL)
        return -1;
    ...
    ep->me_key = dummy;
    ep->me_value = NULL;
    mp->ma_used--;
    ...
    return 0;
}
[/code]

We want to remove the key 'c' from our dictionary. We end up with the following array:

<img src="/images/blog/dict/delete.png" alt="Python dictionary delete key">

Note that the delete item operation doesn't trigger an array resize if the number of used slots is much less that the total number of slots. However, when a key/value pair is added, the need for resize is based on the number of used slots so it can shrink the array too if the new size is the original size of the array: 8 by default.

That's it for now. I hope you enjoyed the article. Please write a comment if you have any feedback.
